/*
 * Generated by gdbus-codegen 2.44.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __XDP_DBUS_H__
#define __XDP_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.portal.ContentPortal */

#define XDP_DBUS_TYPE_CONTENT_PORTAL (xdp_dbus_content_portal_get_type ())
#define XDP_DBUS_CONTENT_PORTAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_CONTENT_PORTAL, XdpDbusContentPortal))
#define XDP_DBUS_IS_CONTENT_PORTAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_CONTENT_PORTAL))
#define XDP_DBUS_CONTENT_PORTAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_DBUS_TYPE_CONTENT_PORTAL, XdpDbusContentPortalIface))

struct _XdpDbusContentPortal;
typedef struct _XdpDbusContentPortal XdpDbusContentPortal;
typedef struct _XdpDbusContentPortalIface XdpDbusContentPortalIface;

struct _XdpDbusContentPortalIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_open) (
    XdpDbusContentPortal *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_types);

};

GType xdp_dbus_content_portal_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_dbus_content_portal_interface_info (void);
guint xdp_dbus_content_portal_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_dbus_content_portal_complete_open (
    XdpDbusContentPortal *object,
    GDBusMethodInvocation *invocation,
    gint64 handle);



/* D-Bus method calls: */
void xdp_dbus_content_portal_call_open (
    XdpDbusContentPortal *proxy,
    const gchar *const *arg_types,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_content_portal_call_open_finish (
    XdpDbusContentPortal *proxy,
    gint64 *out_handle,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_content_portal_call_open_sync (
    XdpDbusContentPortal *proxy,
    const gchar *const *arg_types,
    gint64 *out_handle,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY (xdp_dbus_content_portal_proxy_get_type ())
#define XDP_DBUS_CONTENT_PORTAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY, XdpDbusContentPortalProxy))
#define XDP_DBUS_CONTENT_PORTAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY, XdpDbusContentPortalProxyClass))
#define XDP_DBUS_CONTENT_PORTAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY, XdpDbusContentPortalProxyClass))
#define XDP_DBUS_IS_CONTENT_PORTAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY))
#define XDP_DBUS_IS_CONTENT_PORTAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_DBUS_TYPE_CONTENT_PORTAL_PROXY))

typedef struct _XdpDbusContentPortalProxy XdpDbusContentPortalProxy;
typedef struct _XdpDbusContentPortalProxyClass XdpDbusContentPortalProxyClass;
typedef struct _XdpDbusContentPortalProxyPrivate XdpDbusContentPortalProxyPrivate;

struct _XdpDbusContentPortalProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpDbusContentPortalProxyPrivate *priv;
};

struct _XdpDbusContentPortalProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_dbus_content_portal_proxy_get_type (void) G_GNUC_CONST;

void xdp_dbus_content_portal_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpDbusContentPortal *xdp_dbus_content_portal_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpDbusContentPortal *xdp_dbus_content_portal_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_dbus_content_portal_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpDbusContentPortal *xdp_dbus_content_portal_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpDbusContentPortal *xdp_dbus_content_portal_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON (xdp_dbus_content_portal_skeleton_get_type ())
#define XDP_DBUS_CONTENT_PORTAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON, XdpDbusContentPortalSkeleton))
#define XDP_DBUS_CONTENT_PORTAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON, XdpDbusContentPortalSkeletonClass))
#define XDP_DBUS_CONTENT_PORTAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON, XdpDbusContentPortalSkeletonClass))
#define XDP_DBUS_IS_CONTENT_PORTAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON))
#define XDP_DBUS_IS_CONTENT_PORTAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_DBUS_TYPE_CONTENT_PORTAL_SKELETON))

typedef struct _XdpDbusContentPortalSkeleton XdpDbusContentPortalSkeleton;
typedef struct _XdpDbusContentPortalSkeletonClass XdpDbusContentPortalSkeletonClass;
typedef struct _XdpDbusContentPortalSkeletonPrivate XdpDbusContentPortalSkeletonPrivate;

struct _XdpDbusContentPortalSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpDbusContentPortalSkeletonPrivate *priv;
};

struct _XdpDbusContentPortalSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_dbus_content_portal_skeleton_get_type (void) G_GNUC_CONST;

XdpDbusContentPortal *xdp_dbus_content_portal_skeleton_new (void);


G_END_DECLS

#endif /* __XDP_DBUS_H__ */
